function [avgOCT_mcorr, avgOCT_tcorr, OCTA_mcorr, OCTA_tcorr] = process_octa_volume(cplxData_A,cplxData_B,numBMscans,process_path)

% Location of motion correction code
addpath('C:\Users\tiffa\Documents\1. Projects\PDOCT Processing\main_vctrl\Code_workingversion\matPdoct\MotionCorrection');

[numPoints,numAlines,numBscans] = size(cplxData_A);

% Bulk-phase correction between P and S channels
for i = 1:numBscans
    OCT_P  = cplxData_A(:,:,i);
    OCT_S  = cplxData_B(:,:,i);

    rPhaseOff = repmat(angle(sum(OCT_S.*conj(OCT_P),1)), [size(OCT_S,1) 1]);
    OCT_Cplx = (OCT_P) + (OCT_S.*exp(-1j.*rPhaseOff));
    CompCplx(:,:,i) = OCT_Cplx;
end

save(fullfile(process_path,'CompCplx.mat'), 'CompCplx', '-v7.3');

clearvars cplxData_A cplxData_B

% Remove 1st BM scan in each set
frames_to_keep = setdiff(1:size(CompCplx, 3), 1:4:size(CompCplx, 3)); % for 4BM
CompCplx = CompCplx(:, :, frames_to_keep);
CompCplx = CompCplx(:, 15:end-15,:); % cut flyback

% Local sub-pixel motion correction 
disp('start sub-pixel motion correction')
numMscans = 3; % set to 3 after removing 1st BM scan
cplxOCT_mcorr  = CompCplx;
numFrames = size(CompCplx, 3);
for I = 1:numMscans:numFrames-1
    batchFrames = cplxOCT_mcorr(:, :, I:I+numMscans-1);
    correctedBatch = MotionCorrection(batchFrames);
    cplxOCT_mcorr(:, :, I:I+numMscans-1) = correctedBatch;
end

disp('finished sub-pixel motion correction')
clearvars -except cplxOCT_mcorr 

% Bulk phase offset between BM scans
numMscans = 3;
iF=1; % frame counter
for I = 1:numMscans:size(cplxOCT_mcorr,3)
    K = ((I-1)/numMscans)+1;

    Xconj_2   = cplxOCT_mcorr(:,:,I+1).*conj(cplxOCT_mcorr(:,:,I));
    Xconj_3   = cplxOCT_mcorr(:,:,I+2).*conj(cplxOCT_mcorr(:,:,I));

    BulkOff_2 = repmat(angle(sum(Xconj_2)), [size(Xconj_2,1) 1]);
    BulkOff_3 = repmat(angle(sum(Xconj_3)), [size(Xconj_3,1) 1]);

    Bscan_1  = cplxOCT_mcorr(:,:,I);
    Bscan_2  = cplxOCT_mcorr(:,:,I+1) .* exp(-1j*BulkOff_2);
    Bscan_3  = cplxOCT_mcorr(:,:,I+2) .* exp(-1j*BulkOff_3);

    % Average OCT %
    avgOCT(:,:,K) = (abs(Bscan_1) + abs(Bscan_2) + abs(Bscan_3))/3;


    % Complex Subtraction
    % 		Var(:,:,K) = abs(var(cat(3,(Bscan_1),(Bscan_2),(Bscan_3)),0,3));
    Sub(:,:,K) = abs(Bscan_1 - Bscan_2) + abs(Bscan_2 - Bscan_3);

    if mod(iF,10) == 0
        fprintf('OCTA main process : %d\n', iF);
    end
    iF = iF + 1;
end

clearvars -except avgOCT Sub

% Global Motion Correction
avgOCT_mcorr = avgOCT;
OCTA_mcorr = Sub;
numFrames = size(OCTA_mcorr,3);
startFrame = round(numFrames/2);
axialShift = zeros([1 numFrames]);

for k = startFrame-1:-1:1
     %%% Every 'for' loop, reference frame will be the next frame %%%
    [output] = dftregistration_vol(fft2(imadjust(mat2gray(avgOCT(:, :, k+1)))),...
        fft2(imadjust(mat2gray(avgOCT(:, :, k)))));
    axialShift(k) = output(3);

    avgOCT_mcorr(:, :, k)  = circshift(avgOCT_mcorr(:,:,k),  [round(output(3)) 0]);
    OCTA_mcorr(:, :, k)  = circshift(OCTA_mcorr(:,:,k),  [round(output(3)) 0]);
end

for k = startFrame+1:numFrames
     %%% Every 'for' loop, reference frame will be the previous frame %%%
    [output] = dftregistration_vol(fft2(imadjust(mat2gray(avgOCT(:, :, k-1)))),...
        fft2(imadjust(mat2gray(avgOCT(:, :, k)))));
    axialShift(k) = output(3);

    avgOCT_mcorr(:, :, k)  = circshift(avgOCT_mcorr(:,:,k),  [round(output(3)) 0]);
    OCTA_mcorr(:, :, k)  = circshift(OCTA_mcorr(:, :, k),  [round(output(3)) 0]);
end


numFrames   = size(avgOCT,3);
yShift_axial = zeros([numFrames 1]);
limit = 150;
usfac = 1; 
avgOCT_mcorr = avgOCT;
OCTA_mcorr_Var = Sub;
% OCTA_mcorr_Var = Var_interleaved;

for I = 1:numFrames
    % Every 'for' loop, reference frame will be the middle frame
    [output, ~] = dftregistration_vol(fft2(20.*log10(avgOCT(:, :, round(numFrames./2)))), ...
        fft2(20.*log10(avgOCT(:, :, I))), usfac);

        if isempty(output)
            output = zeros(1,4);
        end

    % Assign and save the shifting value for axial (yShift)
    yShift_axial(I) = round(output(3));
    
    % Thresholding  value was found via plotting the shifting values
    if abs(output(3)) >= limit
        output(3) = 0;
    end

end

% Global motion correction based on smoothen avgOCT motion correction
for I = 1:numFrames

    avgOCT_mcorr(:,:,I)  = circshift(avgOCT(:,:,I), [yShift_axial(I), 0]);
    OCTA_mcorr_Var(:,:,I)  = circshift(Sub(:,:,I), [yShift_axial(I), 0]);
end


% Tilt correction
numLines = size(avgOCT_mcorr,2);
usfac = 1;

avgOCT_tcorr        = zeros(size(avgOCT_mcorr));
OCTA_tcorr_Var      = zeros(size(OCTA_mcorr_Var));

for I = 1:numLines

    %Every 'for' loop, reference frame will be the middle frame
    [output,~] = dftregistration_vol(fft2(squeeze(avgOCT_mcorr(:, round(numLines./2), :))), fft2(squeeze(avgOCT_mcorr(:,I,:))), usfac);
    
    %Assign and save the shifting value along axial direction
    axialShift_tilt(I) = round(output(3));

end

%Curve Fitting
x = [1:numLines]';
cx = polyfit(x,axialShift_tilt(:,1:end),2);
axialShift_tilt_fit = polyval(cx,x);

for j = 1:numLines

    %Motion correction processing as shifting value along axial direction
    avgOCT_tcorr(:,j,:) = circshift(avgOCT_mcorr(:,j,:), [round(axialShift_tilt_fit(j)), 0]);
    OCTA_tcorr_Var(:,j,:) = circshift(OCTA_mcorr_Var(:,j,:), [round(axialShift_tilt_fit(j)), 0]);
    % OCTA_tcorr_var(:,j,:) = circshift(var_mcorr(:,j,:), [round(axialShift_tilt_fit(j)), 0]);

end

% Global Tilt Correction (preliminary visualization only)
avgOCT_tcorr = avgOCT_mcorr;
OCTA_tcorr = OCTA_mcorr;
numFrames = size(OCTA_tcorr,2);
startFrame = round(numFrames/2);
axialShift = zeros([1 numFrames]);

for k = 1:numFrames
    [output] = dftregistration_vol(fft2(imadjust(mat2gray(squeeze(avgOCT_mcorr(:, round(numFrames./2), :))))),...
        fft2(imadjust(mat2gray(squeeze(avgOCT_mcorr(:, k, :))))));
    axialShift(k) = output(3);

    avgOCT_tcorr(:, :, k)  = circshift(avgOCT_tcorr(:,:,k),  [round(output(3)) 0]);
    OCTA_tcorr(:, k, :)  = circshift(OCTA_tcorr(:,k,:),  [round(output(3)) 0]);
end

% iF=1; % frame counter
% for j = 1:numBMscans:numBscans
%     k = ((j-1)/numBMscans) + 1;
%     
%     if j+numBMscans-1>numBscans
%         break
%     end
%    
%     avgOCT(:,:,k)  = mean(abs(CompCplx(:,:,j:j+numBMscans-1)),3);
%     OCTA(:,:,k) = var(CompCplx(:,:,j:j+numBMscans-1), 0, 3);
% 
%     if mod(iF,10) == 0
%         fprintf('OCTA main process : %d\n', iF);
%     end
%     iF = iF + 1;
% end

disp('OCTA Processing complete');

end
